<?php

namespace Test;

use App\Diamond;
use PHPUnit\Framework\TestCase;

class DiamondTest extends TestCase
{
    private Diamond $diamond;

    protected function setUp(): void
    {
        $this->diamond = new Diamond();
    }

    public function testGetTemplate(): void
    {
        self::assertEquals('A', $this->diamond->getTemplate('A'));
        self::assertEquals('FEDCBABCDEF', $this->diamond->getTemplate('F'));
        $this->assertEquals('ZYXWVUTSRQPONMLKJIHGFEDCBABCDEFGHIJKLMNOPQRSTUVWXYZ', $this->diamond->getTemplate('Z'));
    }

    public function testPurge()
    {
        self::assertEquals('A', $this->diamond->purge('A', 'A'));
        self::assertEquals('..A..', $this->diamond->purge('BCARG', 'A'));
        self::assertEquals('A.A.A', $this->diamond->purge('ACARA', 'A'));
    }

    /**
     * @dataProvider figureProvider
     */
    public function testDraw($figure, $diamondEdge): void
    {
        self::assertEquals(
            $figure,
            $this->diamond->draw($diamondEdge)
        );
    }

    public function figureProvider(): \Generator
    {
        $figure = "A\n";

        yield [$figure, 'A'];

        $figure =
            ".A.\n".
            "B.B\n".
            ".A.\n";

        yield [$figure, 'B'];

        $figure =
            "..A..\n".
            ".B.B.\n".
            "C...C\n".
            ".B.B.\n".
            "..A..\n";

        yield [$figure, 'C'];

        $figure =
            "...A...\n" .
            "..B.B..\n" .
            ".C...C.\n" .
            "D.....D\n" .
            ".C...C.\n" .
            "..B.B..\n" .
            "...A...\n";

        yield [$figure, 'D'];
    }

    public function testComplete(): void
    {
        self::assertEquals(
            ".........................A.........................\n".
            "........................B.B........................\n".
            ".......................C...C.......................\n".
            "......................D.....D......................\n".
            ".....................E.......E.....................\n".
            "....................F.........F....................\n".
            "...................G...........G...................\n".
            "..................H.............H..................\n".
            ".................I...............I.................\n".
            "................J.................J................\n".
            "...............K...................K...............\n".
            "..............L.....................L..............\n".
            ".............M.......................M.............\n".
            "............N.........................N............\n".
            "...........O...........................O...........\n".
            "..........P.............................P..........\n".
            ".........Q...............................Q.........\n".
            "........R.................................R........\n".
            ".......S...................................S.......\n".
            "......T.....................................T......\n".
            ".....U.......................................U.....\n".
            "....V.........................................V....\n".
            "...W...........................................W...\n".
            "..X.............................................X..\n".
            ".Y...............................................Y.\n".
            "Z.................................................Z\n".
            ".Y...............................................Y.\n".
            "..X.............................................X..\n".
            "...W...........................................W...\n".
            "....V.........................................V....\n".
            ".....U.......................................U.....\n".
            "......T.....................................T......\n".
            ".......S...................................S.......\n".
            "........R.................................R........\n".
            ".........Q...............................Q.........\n".
            "..........P.............................P..........\n".
            "...........O...........................O...........\n".
            "............N.........................N............\n".
            ".............M.......................M.............\n".
            "..............L.....................L..............\n".
            "...............K...................K...............\n".
            "................J.................J................\n".
            ".................I...............I.................\n".
            "..................H.............H..................\n".
            "...................G...........G...................\n".
            "....................F.........F....................\n".
            ".....................E.......E.....................\n".
            "......................D.....D......................\n".
            ".......................C...C.......................\n".
            "........................B.B........................\n".
            ".........................A.........................\n",
            $this->diamond->draw('Z')
        );
    }

    public function testCustomDiamond(): void
    {
        $d = new Diamond('1234567890', '+');

        self::assertEquals(
            "++1++\n".
            "+2+2+\n".
            "3+++3\n".
            "+2+2+\n".
            "++1++\n",
            $d->draw('3')
        );
    }
}
